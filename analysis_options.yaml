# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.

# The "flutter_lints" package contains a set of recommended lints to
# encourage good coding practices. The lint set provided by the package is
# activated in this `analysis_options.yaml` file located at the root of your
# package.

# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.

# include: package:flutter_lints/flutter.yaml
include: package:austerity/analysis_options.yaml
# include: package:very_good_analysis/analysis_options.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at
  # https://dart-lang.github.io/linter/lints/index.html.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    public_member_api_docs: false
    # avoid_print: false
    # use_key_in_widget_constructors: false
    # prefer_single_quotes: false
    # omit_local_variable_types: false
    lines_longer_than_80_chars: false
    avoid_classes_with_only_static_members: false
# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options

analyzer:
  errors:
    diagnostic_describe_all_properties: ignore
